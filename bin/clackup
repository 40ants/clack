#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

#|
A command-line interface for clack:clackup.
|#

(ql:quickload '(:uiop :split-sequence) :silent t)

(import 'split-sequence:split-sequence)

(defun help ()
  (format t "~&Usage:
    # run the .lisp file
    ~A hello.lisp

    # switch server handler with --server
    ~:*~A hello.lisp --server wookie --port 8080
"
          (read-from-string
           (second (assoc "script"
                          (let ((*read-eval*))
                            (read-from-string (uiop:getenv "ROS_OPTS")))
                          :test 'equal)))))

(defun terminate (code &optional message args)
  (when message
    (format *error-output* "~&Error: ~A~%"
            (apply #'format nil (princ-to-string message) args)))
  (uiop:quit code))

(defun starts-with (x starts)
  (and (<= (length starts) (length x))
       (string= x starts :end1 (length starts))))

(defun parse-args (args)
  (flet ((parse-value (value)
           (or (ignore-errors
                (let ((read-value (read-from-string value)))
                  (if (and (symbolp read-value)
                           (not (keywordp read-value)))
                      value
                      read-value)))
               value)))
    (loop for (option value) on args by #'cddr
          if (not (starts-with option "--"))
            do (error "Invalid option: ~S" option)
          else if (string-equal option "--server")
                 append (list :server
                              (let ((parsed (parse-value value)))
                                (if (keywordp parsed)
                                    parsed
                                    (intern (string-upcase value) :keyword))))
          else
            append (list (intern (string-upcase (subseq option 2)) :keyword)
                         (parse-value value)))))

(defun parse-server-starter-port ()
  (flet ((parse-host-port (host-port)
           (parse-integer
            (let ((colon-pos (position #\: host-port)))
              (if colon-pos
                  (subseq host-port (1+ colon-pos))
                  host-port)))))
    (let ((ss-ports (uiop:getenv "SERVER_STARTER_PORT")))
      (when (stringp ss-ports)
        (destructuring-bind (host-port fd)
            (split-sequence #\=
                            ;; Assuming the first binding is for the Clack web server.
                            (car (split-sequence #\; ss-ports :count 1)))
          (values (parse-host-port host-port)
                  (parse-integer fd)))))))

(defun main (&optional app-file &rest key-args)
  (unless app-file
    (help)
    (uiop:quit -1))

  (unless (probe-file app-file)
    (terminate -1 "File doesn't exist: ~A" app-file))

  (ql:quickload :clack :silent t)

  (let ((args (parse-args key-args)))
    ;; Add :port and :fd from Server::Starter's environment var.
    (multiple-value-bind (port fd)
        (parse-server-starter-port)
      (when port
        (setf args (append args (list :port port :fd fd)))))

    ;; Disable threads
    (setf (getf args :use-thread) nil)

    (apply (intern (string :clackup) :clack) app-file args)))
